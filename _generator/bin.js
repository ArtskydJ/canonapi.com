const books = require('books-of-the-bible')

const path = require('path')
const fs = require('fs')

const bible_text_dir = path.join(__dirname, '..', 'v1')
const write_json = (rel_file_path, obj) => {
	write_file(rel_file_path, JSON.stringify(obj, null, 1))
}
const read_file = (rel_file_path) => {
	const abs_file_path = path.join(bible_text_dir, rel_file_path)
	return fs.readFileSync(abs_file_path, { encoding: 'UTF-8' })
}
const write_file = (rel_file_path, text) => {
	const abs_file_path = path.join(bible_text_dir, rel_file_path)
	fs.writeFileSync(abs_file_path, text, { encoding: 'UTF-8' })
}
const ensure_directory = (dir) => {
	try {
		fs.mkdirSync(dir)
	} catch (e) {
		if (e.code !== 'EEXIST') throw e
	}
}

books.forEach(({ name }) => {
	const normalized_name = name.toLowerCase().replace(/ /g, '')
	ensure_directory(bible_text_dir)
	const book_dir = path.join(bible_text_dir, normalized_name)
	ensure_directory(book_dir)

	const book_obj = require(`world-english-bible/json/${normalized_name}`)
	const chapters_array = book_obj
		.filter(chunk => chunk.type.endsWith(' text'))
		.reduce((chapters, chunk) => {
			let chapter = chapters[chunk.chapterNumber - 1]
			if (!chapter) {
				chapter = [ null ] // 1-index the verses
				chapters.push(chapter)
			}

			if (!chapter[chunk.verseNumber]) {
				chapter.push(chunk.value)
			} else if (chunk.type === 'paragraph text') {
				chapter[chunk.verseNumber] += chunk.value
			} else { // line text
				chapter[chunk.verseNumber] += '\n' + chunk.value
			}

			return chapters
		}, [])
	chapters_array.forEach((chapter, chapter_index) => {
		write_json(`${normalized_name}/${chapter_index + 1}.json`, chapter)
	})
})

write_json('last_update.json', new Date().toISOString())

const books_array_text = books.map(({ name, aliases }) => `\t[ '${[ name, ...aliases ].join(`', '`)}' ]`).join(',\n')
const index_js = read_file('../index.js')
const autogenerated_index_js = index_js.replace(
	/\/\/ BELOW IS AUTOGENERATED\. DO NOT ALTER[\S\s]+ABOVE IS AUTOGENERATED\. DO NOT ALTER \/\//,
	`// BELOW IS AUTOGENERATED. DO NOT ALTER //\nconst books_names = [\n${ books_array_text }\n]\n// ABOVE IS AUTOGENERATED. DO NOT ALTER //`)
if (autogenerated_index_js !== index_js) {
	write_file('../index.js', autogenerated_index_js)
}
